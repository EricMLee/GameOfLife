{"version":3,"sources":["Node.jsx","Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isAlive","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","PathfindingVisualizer","state","grid","mouseIsPressed","playing","getInitialGrid","setState","console","log","newGrid","getNewGridWithWallToggled","playGame","setTimeout","nextLevel","i","length","currentRow","n","counter","push","createAliveNode","createNode","class","onClick","setUp","map","rowIdx","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc5cc8cd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './css/Node.css';\r\n\r\nexport default class Node extends Component{\r\n  render() {\r\n    const {\r\n      col,\r\n      isAlive,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isAlive ? 'node-alive' : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport Node from './Node';\r\n\r\nimport './css/Board.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      playing: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  resetGrid(){\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    console.log(row)\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  setUp(grid){\r\n    this.setState({playing: true});\r\n    this.playGame(grid);\r\n  }\r\n\r\n  playGame(grid){\r\n    if(this.state.playing){\r\n      setTimeout(() => {\r\n        grid = this.nextLevel(grid);\r\n        this.playGame(grid);\r\n      }, 1);\r\n    }else{\r\n      this.setState({playing: true});\r\n    }\r\n  }\r\n\r\n  nextLevel(grid){\r\n    let newGrid = [];\r\n    for(let i = 0; i < grid.length; i++){\r\n      const currentRow = [];\r\n      for(let n = 0; n < grid[0].length; n++){\r\n        let counter = 0;\r\n        if(i - 1 !== -1 && grid[i - 1][n].isAlive){\r\n          counter++;\r\n        }\r\n        if(i - 1 !== -1 && n-1 !== -1 && grid[i - 1][n-1].isAlive){\r\n          counter++;\r\n        }\r\n        if(i - 1 !== -1 && n+1 !== grid[0].length && grid[i - 1][n+1].isAlive){\r\n          counter++;\r\n        }\r\n        if(i + 1 !== grid.length && grid[i + 1][n].isAlive){\r\n          counter++;\r\n        }\r\n        if(i + 1 !== grid.length && n+1 !== grid[0].length && grid[i + 1][n + 1].isAlive){\r\n          counter++;\r\n        }\r\n        if(i + 1 !== grid.length && n-1 !== -1 && grid[i + 1][n - 1].isAlive){\r\n          counter++;\r\n        }\r\n        if(n - 1 !== -1 && grid[i][n-1].isAlive){\r\n          counter++;\r\n        }\r\n        if(n + 1 !== grid[0].length && grid[i][n+1].isAlive){\r\n          counter++;\r\n        }\r\n        if(grid[i][n].isAlive){\r\n          if(counter === 2 || counter === 3){\r\n            currentRow.push(createAliveNode(n, i));\r\n          }else{\r\n            currentRow.push(createNode(n, i));\r\n          }\r\n        }else{\r\n          if(counter === 3){\r\n            currentRow.push(createAliveNode(n, i));\r\n          }else{\r\n            currentRow.push(createNode(n, i));\r\n          }\r\n        }\r\n      }\r\n      newGrid.push(currentRow);\r\n    }\r\n    this.setState({grid: newGrid});\r\n    return newGrid;\r\n  }\r\n  \r\n  render() {\r\n    const {grid, mouseIsPressed, playing} = this.state;\r\n    return (\r\n      <>\r\n        <div className = \"nav\">\r\n          <h1 className = \"gameOfLife\">Conway's Game of Life</h1>\r\n          <ul>\r\n            <li><button class=\"button\" onClick={() => {\r\n              this.setState({playing: true});\r\n              this.setUp(grid);\r\n            }}>\r\n              Play\r\n            </button></li>\r\n            <li><button class=\"button\" onClick={() => {\r\n              this.setState({playing:false});\r\n            }}>\r\n              Stop\r\n            </button></li>\r\n            <li><button class=\"button\" onClick={() => {\r\n              this.nextLevel(grid);\r\n            }}>\r\n              Step\r\n            </button></li>\r\n            <li><button class=\"button\" onClick={() => {\r\n              const grid = getInitialGrid();\r\n              this.setState({grid});}}>\r\n              Clear Board\r\n            </button></li>\r\n          </ul>\r\n        </div>\r\n        {/* <button onClick={() => {\r\n          const grid = getInitialGrid();\r\n          this.setState({grid});}}>\r\n          Clear Board\r\n        </button>\r\n        <button onClick={() => {\r\n          this.nextLevel(grid);\r\n        }}>\r\n          Step\r\n        </button>\r\n        <button onClick={() => {\r\n          this.setState({playing: true});\r\n          this.setUp(grid);\r\n        }}>\r\n          Play\r\n        </button>\r\n        <button onClick={() => {\r\n          this.setState({playing:false});\r\n        }}>\r\n          Stop\r\n        </button> */}\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className = \"rowOfNodes\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isAlive} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isAlive = {isAlive}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 30; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 95/1.3; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: false,\r\n  };\r\n};\r\n\r\nconst createAliveNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: true,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  console.log(row);\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isAlive: !node.isAlive,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import './css/App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}